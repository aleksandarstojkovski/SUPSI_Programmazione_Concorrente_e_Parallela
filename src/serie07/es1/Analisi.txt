Il problema in questo esercizio Ã¨ che vengono effetuate delle compound-actions in maniera non atomica.
Ho risolto l'esercizio in due modi.
Il primo, meno efficace consiste nel circondare le compound actions da blocchi syncronized:
			if (counter == 0) {
				synchronized (sharedMap) {
					if (sharedMap.containsKey(key)
							&& sharedMap.get(key).equals(int1)) {
						sharedMap.remove(key);
						log("{" + key + "} remove 1");
					}
				}
			} else if (counter == 1) {
				synchronized (sharedMap) {
					if (!sharedMap.containsKey(key)) {
						sharedMap.put(key, int1);
						log("{" + key + "} put 1");
					}
				}
			} else if (counter == 5) {
				synchronized (sharedMap) {
					if (sharedMap.containsKey(key) && sharedMap.get(key).equals(10)) {
						final Integer prev = sharedMap.put(key, int5);
						log("{" + key + "} replace " + prev.intValue() + " with 5");
					}
				}
			} else if (counter == 10) {
				synchronized (sharedMap) {
					if (sharedMap.containsKey(key)) {
						final Integer prev = sharedMap.put(key, int10);
						log("{" + key + "} replace " + prev.intValue() + " with 10");
					}
				}
			}
Il secondo invece sfrutta le le compound-actions fornite dalle concurrent collection.
			if (counter == 0) {
				if (sharedMap.remove(key,int1)) {
					log("{" + key + "} remove 1");
				}
			} else if (counter == 1) {
				if (sharedMap.putIfAbsent(key,int1)==null) {
					log("{" + key + "} put 1");
				}
			} else if (counter == 5) {
				if (sharedMap.replace(key,10,int5)) {
					log("{" + key + "} replace " + 10 + " with 5");
				}
			} else if (counter == 10) {
				sharedMap.computeIfPresent(key,(k,v)->{
					log("{" + key + "} replace " + v.intValue() + " with 10");
					return sharedMap.put(k,int10);
				});
			}''
